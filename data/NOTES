/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
///////////////////////////////////////////////////////////////////////////////]
//  			A
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/



///////////////////////////////////////////////////////////////////////////////]
//  			MACRO
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// MACRO
// #define funct(ap, type)    (*(type *)((ap += sizeof(type)) - sizeof(type)))
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/



///////////////////////////////////////////////////////////////////////////////]
//  			ULIMITS
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Setting Limits

You can set various limits using ulimit. Here are some common options:

    Core file size (-c): The maximum size of core files created.
    Data segment size (-d): The maximum size of the data segment for a process.
    File size (-f): The maximum size of files created by the shell.
    Number of open files (-n): The maximum number of file descriptors a process can have.
    Stack size (-s): The maximum stack size for a process.
    CPU time (-t): The maximum amount of CPU time a process can use.
    Virtual memory (-v): The maximum amount of virtual memory available to a process.
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/



///////////////////////////////////////////////////////////////////////////////]
//  			GITHUB
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
git pull
git log > navigate snapshots in time
git log --pretty=fuller
git log --pretty=oneline --abbrev-commit --date=short
git log --since="2022-01-01" --until="2022-12-31"
git checkout <commit-hash>
	Use the hash from the log output.
	save a good commit hash is Makefile Makerestore
To reset the repository to a specific commit:
	git reset --hard <commit-hash>
git push origin feature-branch:main

// Stash Changes: Use git stash to stash your changes.
	git stash
// Switch Branches: After stashing your changes, you can switch branches.
	git checkout <branch-name>
// Apply Stashed Changes: you can apply your stashed changes to the new branch.
	git stash apply
// Pop Stashed Changes: you can apply and remove the stashed changes in one step
	git stash pop
// List Stashes: To see a list of stashed changes, you can use:
	git stash list
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/



///////////////////////////////////////////////////////////////////////////////]
//  			BIWISE
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
while (((condition1) & bit) || ((condition2) & ~bit))

   Setting a Bit at N: (counting from 0)
x |= (1 << N);

   Clearing a Bit at N:
x &= ~(1 << N);

	Toggling a Bit at N:
x ^= (1 << N);

	Toggle a specific range of bits, end (inclusive)
x ^= ((1 << (end - start + 1)) - 1) << start;

	Checking if Bit N is Set:
if (x & (1 << N)) {
	// Bit is set }

	Checking if a Bit is Clear:
if (!(x & (1 << N))) {
	// Bit is clear}

	Setting Multiple Bits at Once:
x |= (1 << 1) | (1 << 3) | (1 << 5);

	Extracting Specific Bits: (3 least)
int	extractedBits = x & 0b111;

	Swapping Two Variables without Using a Temporary Variable:
a ^= b;
b ^= a;
a ^= b;

	Checking if an Integer is Even or Odd: (faster than % 2)
if (num & 1)
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/



///////////////////////////////////////////////////////////////////////////////]
//  			FLAGS OPEN
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Common flags used with open():
    O_RDONLY: Open for reading only.
    O_WRONLY: Open for writing only.
    O_RDWR: Open for reading and writing.
    O_APPEND: Open in append mode (writes are added to the end of the file).
    O_CREAT: Create the file if it does not exist.
    O_TRUNC: Truncate the file to zero length if it already exists.

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/


///////////////////////////////////////////////////////////////////////////////]
//  			CHILD RETURN
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


	waitpid(pid, &status, 0)
WIFEXITED(status): Returns true if the child terminated normally (by calling exit or returning from main).
WEXITSTATUS(status): Returns the exit status of the child. This should only be used if WIFEXITED(status) is true.
WIFSIGNALED(status): Returns true if the child process was terminated by a signal.
WTERMSIG(status): Returns the signal number that caused the child to terminate. This should only be used if WIFSIGNALED(status) is true.


WIFEXITED(status):
    This macro checks if the child process terminated normally (i.e., by calling exit() or returning from main).
    Returns a non-zero value (true) if the child terminated normally.
WEXITSTATUS(status):
    This macro retrieves the exit status of the child if WIFEXITED(status) is true.
    It extracts the low-order 8 bits (i.e., the least significant byte) of the status, which is the actual exit code passed by the child process using exit() or returned from main.
WIFSIGNALED(status):
    This macro checks if the child process terminated due to a signal (i.e., if it was killed by a signal).
    Returns a non-zero value if the child process was terminated by a signal.
WTERMSIG(status):
    If WIFSIGNALED(status) is true, this macro retrieves the signal number that caused the child process to terminate.
WIFSTOPPED(status):
    This macro checks if the child process is currently stopped (not terminated) because it received a signal that stopped it.
    Returns a non-zero value if the child process is stopped.
WSTOPSIG(status):
    If WIFSTOPPED(status) is true, this macro retrieves the signal number that caused the child process to stop.
WIFCONTINUED(status):
    This macro checks if the child process was resumed after being stopped (only relevant in certain systems).
    Returns a non-zero value if the child process has been resumed by SIGCONT.


* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/



///////////////////////////////////////////////////////////////////////////////]
//  			SIGNALS
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

		0	???
SIGHUP	1	Hangup detected on controlling terminal or death of controlling process	N/A
SIGINT	2	Interrupt from keyboard	Ctrl + C
SIGQUIT	3	Quit from keyboard	Ctrl + \
SIGILL	4	Illegal Instruction	N/A
SIGTRAP	5	Trace/breakpoint trap	N/A
SIGABRT	6	Abort signal from abort	N/A
SIGBUS	7	Bus error (bad memory access)	N/A
SIGFPE	8	Floating-point exception	N/A
SIGKILL	9	Kill signal (cannot be caught or ignored)	N/A
SIGUSR1	10	User-defined signal 1	N/A
SIGSEGV	11	Segmentation fault	N/A
SIGUSR2	12	User-defined signal 2	N/A
SIGPIPE	13	Broken pipe: write to pipe with no readers	N/A
SIGALRM	14	Timer signal from alarm	N/A
SIGTERM	15	Termination signal	N/A
SIGSTKFLT	16	Stack fault on coprocessor	N/A
SIGCHLD	17	Child stopped or terminated	N/A
SIGCONT	18	Continue if stopped	N/A
SIGSTOP	19	Stop process	N/A
SIGTSTP	20	Stop typed at terminal	Ctrl + Z
SIGTTIN	21	Terminal input for background process	N/A
SIGTTOU	22	Terminal output for background process	N/A
SIGURG	23	Urgent condition on socket	N/A
SIGXCPU	24	CPU time limit exceeded	N/A
SIGXFSZ	25	File size limit exceeded	N/A
SIGVTALRM	26	Virtual alarm clock	N/A
SIGPROF	27	Profiling timer expired	N/A
SIGWINCH	28	Window resize signal	N/A
SIGIO	29	I/O now possible	N/A
SIGPWR	30	Power failure	N/A
SIGSYS	31	Bad system call	N/A
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
